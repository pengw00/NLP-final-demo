{"type":"cell","id":"0d846b","pos":21,"input":"tm.save_choices()","output":{"0":{"name":"stdout","output_type":"stream","text":"\nYour choices have been saved. You can overwrite your results by running this cell again.\n"}},"cell_type":"code","exec_count":11,"metadata":{"editable":false}}
{"type":"cell","id":"14cd7d","pos":5,"input":"tm.display(2)","output":{"0":{"data":{"text/plain":"Dropdown(description='Your choice:', options=('-- Select one', 'Option A', 'Option B', 'Option C', 'Option D')…"},"output_type":"execute_result","exec_count":3}},"cell_type":"code","exec_count":3,"metadata":{"editable":false}}
{"type":"cell","id":"196070","pos":16,"input":"### 8 - (5pts)\n\nIn the context of dialogue systems, which of the following is **not** a limitation/constraint of sequence to sequence models?\n\n    a. They need text preprocessing and lemmatization\n    b. They are originally designed for Machine Translation and thus they disregard some \n       conversational aspects\n    c. They may show a tendency for repetitive responses\n    d. They lack contextual information","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"199ac1","pos":9,"input":"tm.display(4)","output":{"0":{"data":{"text/plain":"Dropdown(description='Your choice:', options=('-- Select one', 'Option A', 'Option B', 'Option C', 'Option D')…"},"output_type":"execute_result","exec_count":5}},"cell_type":"code","exec_count":5,"metadata":{"editable":false}}
{"type":"cell","id":"1b9bb1","pos":6,"input":"### 3 - (5pts)\nFrom the linguistic perspective, what is one of the problems of the CKY algorithm?\n\n    a. It is not practical because it is too slow regardless of the grammar\n    b. It is not capable to produce all the possible trees with respect to the grammar for a given sequence\n    c. The grammar has to be in CNF and it will only produce binary trees\n    d. There is no problem with the CKY algorithm from the linguistic perspective","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"1fc8aa","pos":4,"input":"### 2 - (5pts)\nIn a parsing tree, which of the following is true?\n\n    a. Each node represents a word in the sentence\n    b. The order of the words is not preserved\n    c. The number of the leaves is equal to the number of the words\n    d. The tree is always binary","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"20359d","pos":29,"input":"parse_tree = ''\nparse_tree += parse[0]\nparse_prob = 0.0\nparse_prob = prob\n","output":{"0":{"ename":"TypeError","evalue":"Tree does not support addition","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-63-d23cebf52ad0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mparse_tree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mparse_tree\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mparse\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mparse_prob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.5/dist-packages/nltk/tree.py\u001b[0m in \u001b[0;36m__radd__\u001b[0;34m(self, v)\u001b[0m\n\u001b[1;32m    145\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Tree does not support addition'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    146\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__radd__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 147\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Tree does not support addition'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;31m#////////////////////////////////////////////////////////////\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Tree does not support addition"]}},"cell_type":"code","exec_count":63}
{"type":"cell","id":"254c83","pos":36,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"421546","pos":20,"input":"#### STORE YOUR ANSWERS BY RUNNING THE FOLLOWING CELL","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"45f78a","pos":34,"input":"!cat cky_trees.txt","output":{"0":{"name":"stdout","output_type":"stream","text":"cat: cky_trees.txt: No such file or directory\r\n"}},"cell_type":"code","exec_count":16,"metadata":{"editable":false}}
{"type":"cell","id":"56eae0","pos":12,"input":"### 6 - (5pts)\n\nWhat is the standard way to associate probabilities to the production rules of a gramar? \n\n    a. Calculating the frequency of that production rule and then dividing by the total \n       number of rules in the grammar\n    b. Counting all the rules with the same right-hand-side symbols and then dividing it by \n       the total number of rules in the grammar\n    c. Calculating the frequency of that production rule and then diving by the total \n       number of rules that contain the same head (lef-hand-side) symbol of the original rule\n    d. Counting all the rules with the same right-hand-side symbols regardless of the order\n       and then dividing it by the total number of rules","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"5ae88d","pos":26,"input":"### YOUR CODE GOES HERE\nfrom nltk import tree\nfrom nltk.tree import Tree\nfrom nltk.grammar import Nonterminal\ngrammar1 = open(\"grammar.txt\").readlines()\nword2 = open(\"grammar2.txt\").readlines()\ngrammar2 ={}\nfrom collections import defaultdict\nfor line in grammar1:\n    rule = line.strip('\\n').split('|')\n    rule0 = rule[0].strip().split('->')\n    nonparent1 = Nonterminal(rule0[0].strip())\n    rightside2 = rule0[1].strip().split()\n    tuple_right = (Nonterminal(rightside2[0]), Nonterminal(rightside2[1]))\n    rights = (tuple_right, float(rule[1]))\n    if nonparent1 in grammar2:\n        grammar2[nonparent1].append(rights)\n    else:\n        grammar2[nonparent1] = [rights]\n#print(grammar2)\ngrammar3 = defaultdict(dict)\nfor line in word2:\n    rule = line.strip('\\n').split('|')\n    #print(rule)\n    rule0 = rule[0].strip().split('->')\n    nonparent2 = Nonterminal(rule0[0].strip())\n    #print(nonparent2)\n    rightside2 = rule0[1].strip()\n    for item in rightside2:\n        nonterminal2 = (rightside2,)\n    #print(nonterminal2)\n        tuple2 = (nonterminal2, float(rule[1]))\n    if nonparent2 in grammar2:\n        grammar2[nonparent2].append(tuple2)\n    else:\n        grammar2[nonparent2] = [tuple2]\nfor left in grammar2:\n    for item in grammar2[left]:\n        grammar3[left][item[0]] = item[1] \ninversePCFG_non = defaultdict(list)\nfor key in grammar3:\n    for value in grammar3[key]:\n        inversePCFG_non[value].append((key,grammar3[key][value]))\ndef find_nts(word):\n    values = inversePCFG_non[(word,)]\n    result = [(Tree(item[0], [word, '']), item[1])for item in values]\n    return result\ndef getParserTree(root):\n    if root.status():\n        return '(' + root.root() + ' ' + root.terminal() + ')'\n    left = getParserTree(root.left())\n    right = getParserTree(root.right())\n    return '(' + root.root() + ' ' + left + ' ' + right + ')'\nlong = len(sent)\ntable = defaultdict(lambda: defaultdict(list))\nfor end in range(2, long + 2):\n    word9 = '\\''\n    word9 += sent[end-2]\n    word9 += '\\''\n    table[end - 2][end - 1] = find_nts(word9)\n    #print(table[end - 2][end - 1])\n    for start in range(end - 2, -1, -1):\n        for split in range(start + 1, end):\n            for left in table[start][split]:\n                for right in table[split][end - 1]:\n                    rules = inversePCFG_non[(left[0].label(), right[0].label())] \n                    table[start][end - 1].extend(\n                                [(Tree(item[0], [left[0], right[0]]), left[1] * right[1] * item[1]) for item in rules])\nif len(table[0][long]) == 0:\n    pass\nelse:\n    parse = sorted(table[0][long], key=lambda x: x[1])[-1]\n    prob = parse[1]\n    trees = parse[0]\n    #print(trees)\ntrees = []\nfor item in table[0][long]:\n        tree1 = getParserTree(item[0])\n        print(tre)\nprint(trees)","output":{"0":{"name":"stdout","output_type":"stream","text":"[Tree(S, [Tree(NP, [\"'John'\", '']), Tree(VP, [Tree(V, [\"'saw'\", '']), Tree(NP, [Tree(NP, [Tree(DT, [\"'the'\", '']), Tree(N, [\"'man'\", ''])]), Tree(PP, [Tree(P, [\"'with'\", '']), Tree(NP, [Tree(DT, [\"'my'\", '']), Tree(N, [\"'telescope'\", ''])])])])])]), Tree(S, [Tree(NP, [\"'John'\", '']), Tree(VP, [Tree(VP, [Tree(V, [\"'saw'\", '']), Tree(NP, [Tree(DT, [\"'the'\", '']), Tree(N, [\"'man'\", ''])])]), Tree(PP, [Tree(P, [\"'with'\", '']), Tree(NP, [Tree(DT, [\"'my'\", '']), Tree(N, [\"'telescope'\", ''])])])])])]\n"}},"cell_type":"code","exec_count":90}
{"type":"cell","id":"615368","pos":13,"input":"tm.display(6)","output":{"0":{"data":{"text/plain":"Dropdown(description='Your choice:', options=('-- Select one', 'Option A', 'Option B', 'Option C', 'Option D')…"},"output_type":"execute_result","exec_count":7}},"cell_type":"code","exec_count":7,"metadata":{"editable":false}}
{"type":"cell","id":"657e04","pos":11,"input":"tm.display(5)","output":{"0":{"data":{"text/plain":"Dropdown(description='Your choice:', options=('-- Select one', 'Option A', 'Option B', 'Option C', 'Option D')…"},"output_type":"execute_result","exec_count":6}},"cell_type":"code","exec_count":6,"metadata":{"editable":false}}
{"type":"cell","id":"7142db","pos":18,"input":"Run the following cell to take a look at your choices you have done so far:","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"792576","pos":17,"input":"tm.display(8)","output":{"0":{"data":{"text/plain":"Dropdown(description='Your choice:', options=('-- Select one', 'Option A', 'Option B', 'Option C', 'Option D')…"},"output_type":"execute_result","exec_count":9}},"cell_type":"code","exec_count":9,"metadata":{"editable":false}}
{"type":"cell","id":"79b781","pos":0,"input":"---\n\n<center>\n<h1>COSC 6336 - Natural Language Processing</h1>\n<h1>Final Exam</h1>\n</center>\n\n---\n\n\n## General instructions\n\nThe exam is divided into two sections. The first part is all about theory questions, and the second part presents a practical problem where you will need to code. There is no grader this time.\n\nThe exam was designed to be completed in **two hours**. ","cell_type":"markdown"}
{"type":"cell","id":"80c690","pos":31,"input":"tm.save_pcky_tree(parse_tree, parse_prob)","output":{"0":{"ename":"NameError","evalue":"name 'parse_tree' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-62-a6ede0459ea7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_pcky_tree\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparse_tree\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparse_prob\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'parse_tree' is not defined"]}},"cell_type":"code","exec_count":62,"metadata":{"editable":false}}
{"type":"cell","id":"80ee86","pos":22,"input":"## Part 2 \n\nIn this section you will implement a CKY algorithm that produces all the possible trees of a sentence. Also, you can implement the probabilistic CKY for extra points. You must assume the following CNF grammar:\n\n```\n    S   -> NP VP [1.0]\n    NP  -> DT N  [0.5]  | NP PP     [0.25] | John [0.1] | I [0.15]\n    DT  -> the   [0.8]  | my        [0.2]\n    N   -> man   [0.5]  | telescope [0.5]\n    VP  -> VP PP [0.3]  | V NP      [0.7]\n    V   -> ate   [0.35] | saw       [0.65]\n    PP  -> P NP  [1.0]\n    P   -> with  [0.61] | under     [0.39]\n```\n\nYou **can use nltk utilities** for any intermmediate task, but the CKY algorithms must be your own code.","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"81e30e","pos":35,"input":"!cat pcky_tree.tsv","output":{"0":{"name":"stdout","output_type":"stream","text":"cat: pcky_tree.tsv: No such file or directory\r\n"}},"cell_type":"code","exec_count":17,"metadata":{"editable":false}}
{"type":"cell","id":"92f9ad","pos":10,"input":"### 5 - (5pts)\n\nIn a classification task where the data is extremely unbalanced, what would be the most appropiate metric to measure the output of your model in such scenario?\n\n    a. Precision\n    b. Accuracy\n    c. F-measure\n    d. Recall","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"9303e8","pos":25,"input":"from nltk.grammar import PCFG\n\ngrammar = PCFG.fromstring(\"\"\"\n    S -> NP VP [1.0] \n    NP -> DT N [0.5] | NP PP [0.25] | 'John' [0.1] | 'I' [0.15]\n    DT -> 'the' [0.8] | 'my' [0.2]\n    N -> 'man' [0.5] | 'telescope' [0.5]\n    VP -> VP PP [0.3] | V NP [0.7]\n    V -> 'ate' [0.35] | 'saw' [0.65]\n    PP -> P NP [1.0] \n    P -> 'with' [0.61] | 'under' [0.39]\"\"\")","cell_type":"code","exec_count":20,"metadata":{"editable":false}}
{"type":"cell","id":"95b573","pos":28,"input":"### 2 - (10pts - BONUS!)\n\nProvide the most likely tree and its probability using your PCKY code.","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"97b27c","pos":19,"input":"tm.show_choices()","output":{"0":{"name":"stdout","output_type":"stream","text":"1 -> A\n2 -> C\n3 -> C\n4 -> A\n5 -> C\n6 -> C\n7 -> C\n8 -> D\n"}},"cell_type":"code","exec_count":10,"metadata":{"editable":false}}
{"type":"cell","id":"98ca56","pos":2,"input":"## Part 1\n\nAnswer the following questions by choosing one of the answers. Once you are done with all the questions, **run the submit cell** (this will store your answers and avoid potential loss of them).\n\n### 1 - (5pts)\nIn a dependency-based parse tree, which of the following is true?\n    \n    a. All nodes are labeled with words\n    b. Only leaf nodes are labeled with words\n    c. Only non-terminal nodes are labeled with words\n    d. No words appear in the tree","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"99f49c","pos":1,"input":"from helper import TestManager\ntm = TestManager()","cell_type":"code","exec_count":1,"metadata":{"editable":false}}
{"type":"cell","id":"9ecbb0","pos":24,"input":"sent = 'John saw the man with my telescope'.split()\nsent","output":{"0":{"data":{"text/plain":"['John', 'saw', 'the', 'man', 'with', 'my', 'telescope']"},"output_type":"execute_result","exec_count":12}},"cell_type":"code","exec_count":12,"metadata":{"editable":false}}
{"type":"cell","id":"a658c0","pos":30,"input":"Save your results running the following function:","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"a8d83a","pos":33,"input":"!cat multiple_choice.tsv","output":{"0":{"name":"stdout","output_type":"stream","text":"cat: multiple_choice.tsv: No such file or directory\r\n"}},"cell_type":"code","exec_count":15,"metadata":{"editable":false}}
{"type":"cell","id":"b7b182","pos":8,"input":"### 4 - (5pts)\nIn the context of the IOB scheme, which of the following is true?\n\n    a. IOB stands for Inside Outside and Between and it is used on chunking tasks \n    b. The IOB scheme is a way to group multiple tokens in a chunking task from a given sequence\n    c. The IOB scheme helps to provide semantic and syntactic information in a classification task\n    d. The IOB scheme is only used for NER labels out of all the NLP applications","cell_type":"markdown"}
{"type":"cell","id":"bac621","pos":15,"input":"tm.display(7)","output":{"0":{"data":{"text/plain":"Dropdown(description='Your choice:', options=('-- Select one', 'Option A', 'Option B', 'Option C', 'Option D')…"},"output_type":"execute_result","exec_count":8}},"cell_type":"code","exec_count":8,"metadata":{"editable":false}}
{"type":"cell","id":"c43517","pos":23,"input":"### 1 - (10pts)\n\nUsing the above grammar generate all the possible trees for the following sentence:\n\n    John saw a man with my telescope\n    \nYou can use your CKY code or implement any other approach to achieve the desired outcome.","cell_type":"markdown","metadata":{"editable":false}}
{"type":"cell","id":"c451f2","pos":32,"input":"---\n## Take a look at your answers","cell_type":"markdown"}
{"type":"cell","id":"d4cb18","pos":7,"input":"tm.display(3)","output":{"0":{"data":{"text/plain":"Dropdown(description='Your choice:', options=('-- Select one', 'Option A', 'Option B', 'Option C', 'Option D')…"},"output_type":"execute_result","exec_count":4}},"cell_type":"code","exec_count":4,"metadata":{"editable":false}}
{"type":"cell","id":"dfa105","pos":3,"input":"tm.display(1)","output":{"0":{"data":{"text/plain":"Dropdown(description='Your choice:', options=('-- Select one', 'Option A', 'Option B', 'Option C', 'Option D')…"},"output_type":"execute_result","exec_count":2}},"cell_type":"code","exec_count":2,"metadata":{"editable":false}}
{"type":"cell","id":"f059db","pos":27,"input":"tm.save_cky_trees(trees)","output":{"0":{"name":"stdout","output_type":"stream","text":"Your trees have been saved. You can overwrite your results by running this function again.\n"}},"cell_type":"code","exec_count":82}
{"type":"cell","id":"fdbf43","pos":14,"input":"### 7 - (5pts)\n\nRegarding the Earley Parsing algorithm, which of the following is **not** correct?\n\n    a. It runs in a top-bottom fashion\n    b. Grammar must be in CNF\n    c. Allows arbitrary CFGs\n    d. The resulting parse tree may be consistent with linguistic grammar","cell_type":"markdown","metadata":{"editable":false}}
{"type":"file","last_load":1525910646834}
{"type":"settings","kernel":"python3","kernel_state":"idle","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.2"}}}